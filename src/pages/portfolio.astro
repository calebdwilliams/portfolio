---
import Card from '../components/Card.astro';
import Footer from '../components/Footer.astro';
import InlineLink from '../components/InlineLink.astro';
import Layout from '../layouts/Layout.astro';
import Nav from '../components/Nav.astro';

import { articles, openSourceProjects, workProjects } from '../assets/data.js';
import GlowList from '../components/GlowList.astro';
---

<Layout
  description="A collection of work by front-end developer Caleb Williams"
  title="Caleb D. Williams | Portfolio"
>
  <main>
    <Nav />

    <header>
      <h1>Portfolio</h1>
      <p>As an employee at Capital One a great deal of my work from the past several years is spread across a variety of pages both internal and external.</p>

      <nav class="portfolio-nav">
        <ul>
          <li><a class="portfolio-section" href="#work">Examples in the wild</a></li>
          <li><a class="portfolio-section" href="#open-source">Open source projects</a></li>
          <li><a class="portfolio-section" href="#writing">Published articles</a></li>
        </ul>
      </nav>
    </header>

    <article id="portfolio" class="portfolio">
      <section id="work" class="project-group">
        <h2>Examples in the wild</h2>

        <GlowList class="projects projects--work">
          {workProjects.map(project => <Card
            title={project.title}
            body={project.body}
            href={project.href}
          />)}
        </GlowList>
      </section>

      <hr>

      <section id="open-source" class="project-group">
          <h2>Open source projects</h2>

          <p>A collection of projects I wrote and currently maintain. This work touches thousands of developers and projects each week.</p>

          <ul class="projects">
            {openSourceProjects.map(project => <Card
              title={project.title}
              body={project.body}
              href={project.href}
            />)}
          </ul>
      </section>

      <hr>

      <section id="writing" class="project-group">
        <h2>Published articles</h2>

        <p>A collection of articles written and published, mostly for <a href="https://css-tricks.com">CSS-Tricks</a>.</p>

        <ul class="projects">
          {articles.map(article => <Card
              title={article.title}
              body={article.body}
              href={article.href}
          />)}
        </ul>
      </section>

      <Footer/>
    </article>
  </main>
</Layout>

<style>
  main {
    display: grid;
    grid-template: "header nav" "header content";
    grid-template-columns: 1fr 1.61fr;
    gap: var(--size-8);
  }
  main header {
    display: flex;
    flex-flow: column;
    gap: var(--size-4);
    grid-area: header;
    justify-content: center;
    position: sticky;
      top: 0;
    max-height: 100dvh;
  }
  .portfolio {
    grid-area: content;
  }
  h1 {
    font-family: var(--font-sans);
    font-size: var(--font-size-fluid-3);
    font-weight: var(--font-weight-2);
  }
  h2 {
    font-size: var(--font-size-fluid-1);
    font-weight: var(--font-weight-2);
    padding-block-end: var(--size-2);
  }
  p {
    font-size: var(--font-size-fluid-0);
  }
  article {
    display: flex;
    flex-flow: column;
    gap: 16px;
  }
  .portfolio-nav ul {
    display: flex;
    flex-flow: column;
    gap: var(--size-2);
    list-style-type: none;
    padding-inline-start: 0;
  }
  .portfolio-nav ul li {
    display: flex;
    padding-inline-start: 0;
  }
  a.portfolio-section {
    align-items: center;
    color: var(--text-2);
    font-size: var(--font-size-0);
    font-weight: var(--font-weight-6);
    opacity: .5;
    text-transform: uppercase;
    transition: all 0.2s var(--ease-in-2);;
  }
  /* a.portfolio-section::after {
    border-top: 1px solid white;
    content: "";
    display: block;
    height: 1px;
  } */
  a.portfolio-section:focus,
  a.portfolio-section:hover {
    text-decoration: underline;
    opacity: 1;
  }
  a.portfolio-section--active {
    opacity: 1;
  }
  .project-group {
    container: projects / inline-size;
    display: flex;
    flex-flow: column;
    gap: 12px;
  }
  .projects {
    display: grid;
    grid-template-columns: 1fr;
    gap: 16px;
    list-style-type: none;
    padding: 0;
    margin: 0;
  }
  .projects--work {
    grid-template-columns: 1fr;
  }
  .projects li {
    border-radius: 8px;
    max-inline-size: unset;
  }
  @container projects (max-width: 400px) {
    .projects {
      grid-template-columns: 1fr;
    }
  }
  @media (max-width: 1000px) {
    main {
      display: grid;
      gap: var(--size-10);
      grid-template: "nav" "header" "content";
    }
    main header {
      position: static;
    }
    .content {
      padding: 0;
    }
  }
</style>

<script>
  if (!window.matchMedia('(prefers-reduced-motion: reduce)').matches) {
    document.querySelectorAll('.link-card').forEach(card => {
      card.classList.add('link-card--hidden');
    });
    const options = {
      root: null,
      rootMargin: '-1px',
      threshold: .25
    };

    const callback = (entries: IntersectionObserverEntry[]) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          window.requestAnimationFrame(() => {
            entry.target.classList.remove('link-card--hidden');
          });
        }
      });
    }

    const observer = new IntersectionObserver(callback, options);

    const linkCards = document.querySelectorAll('.link-card');
    linkCards.forEach(linkCard => {
      observer.observe(linkCard);
    });
  }

  const sectionObserverOptions: IntersectionObserverInit = {
    root: document,
    rootMargin: '16px 0px 0px',
    threshold: .25
  };

  const sectionObserverCallback: IntersectionObserverCallback = (entries: IntersectionObserverEntry[]): void => {
    const activeClass = 'portfolio-section--active';
    const next = entries.find(e => e.isIntersecting)
    if (next?.target.id) {
      const previouslyActiveAnchor = document.querySelector(`.${activeClass}`);
      const newAnchor = document.querySelector(`a[href="#${next.target.id}"]`);

      previouslyActiveAnchor?.classList.toggle(activeClass, false);
      newAnchor?.classList.toggle(activeClass, true);
    }
  };

  const sectionObserver = new IntersectionObserver(sectionObserverCallback, sectionObserverOptions);
  document.querySelectorAll('.project-group').forEach(node => {
    sectionObserver.observe(node);
  })
</script>
